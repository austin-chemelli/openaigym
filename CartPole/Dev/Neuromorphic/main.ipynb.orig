{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6a7fb125",
   "metadata": {},
   "source": [
    "# OpenAIGym Rogue's Gallery\n",
    "--------------------------------------\n",
    "## Implementation of Neuromorphic Algorithm on CartPole-v1\n",
    "\n",
    "### Resources\n",
    "* [James' Project](https://github.gatech.edu/crnch-rg/NeuroSim/blob/master/Maze/start.py)\n",
    "* [Nengo RL Example Docs](https://www.nengo.ai/nengo-fpga/examples.html#reinforcement-learning)\n",
    "* [Nengo RL Example Source Code](https://github.com/nengo/nengo-fpga/blob/master/docs/examples/gui/02-RL-demo.py)\n",
    "* [CartPole Source Code](https://github.com/openai/gym/blob/master/gym/envs/classic_control/cartpole.py#L75)\n",
    "* [Front-end API Docs](https://www.nengo.ai/nengo/frontend-api.html#nengo.Node)\n",
    "* [Network Design Docs](https://www.nengo.ai/nengo/examples/usage/network-design.html)\n",
    "* [Network Examples](https://www.nengo.ai/nengo/examples.html#networks)\n",
    "* [Nengo FPGA Docs](https://www.nengo.ai/nengo-fpga/v0.2.2/getting-started.html#software-install)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad15a6cc",
   "metadata": {},
   "source": [
    "#### Imports and Requirements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a1435d9c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "Requirement already satisfied: gymnasium==0.27.1 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from -r requirements.txt (line 1)) (0.27.1)\n",
      "Requirement already satisfied: matplotlib==3.6.3 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from -r requirements.txt (line 2)) (3.6.3)\n",
      "Requirement already satisfied: nengo==3.2.0 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from -r requirements.txt (line 3)) (3.2.0)\n",
      "Requirement already satisfied: jax-jumpy>=0.2.0 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from gymnasium==0.27.1->-r requirements.txt (line 1)) (0.2.0)\n",
      "Requirement already satisfied: numpy>=1.21.0 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from gymnasium==0.27.1->-r requirements.txt (line 1)) (1.24.2)\n",
      "Requirement already satisfied: typing-extensions>=4.3.0 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from gymnasium==0.27.1->-r requirements.txt (line 1)) (4.4.0)\n",
      "Requirement already satisfied: cloudpickle>=1.2.0 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from gymnasium==0.27.1->-r requirements.txt (line 1)) (2.2.0)\n",
      "Requirement already satisfied: importlib-metadata>=4.8.0 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from gymnasium==0.27.1->-r requirements.txt (line 1)) (4.12.0)\n",
      "Requirement already satisfied: gymnasium-notices>=0.0.1 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from gymnasium==0.27.1->-r requirements.txt (line 1)) (0.0.1)\n",
      "Requirement already satisfied: contourpy>=1.0.1 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib==3.6.3->-r requirements.txt (line 2)) (1.0.7)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib==3.6.3->-r requirements.txt (line 2)) (3.0.6)\n",
      "Requirement already satisfied: packaging>=20.0 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib==3.6.3->-r requirements.txt (line 2)) (21.3)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib==3.6.3->-r requirements.txt (line 2)) (2.8.1)\n",
      "Requirement already satisfied: pillow>=6.2.0 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib==3.6.3->-r requirements.txt (line 2)) (9.0.0)\n",
      "Requirement already satisfied: fonttools>=4.22.0 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib==3.6.3->-r requirements.txt (line 2)) (4.28.5)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib==3.6.3->-r requirements.txt (line 2)) (1.3.2)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from matplotlib==3.6.3->-r requirements.txt (line 2)) (0.11.0)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from importlib-metadata>=4.8.0->gymnasium==0.27.1->-r requirements.txt (line 1)) (3.8.1)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\afxwo\\appdata\\local\\programs\\python\\python39\\lib\\site-packages (from python-dateutil>=2.7->matplotlib==3.6.3->-r requirements.txt (line 2)) (1.15.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
=======
      "Collecting pipreqs\n",
      "  Using cached pipreqs-0.4.11-py2.py3-none-any.whl (32 kB)\n",
      "Collecting yarg\n",
      "  Using cached yarg-0.1.9-py2.py3-none-any.whl (19 kB)\n",
      "Collecting docopt\n",
      "  Using cached docopt-0.6.2.tar.gz (25 kB)\n",
      "  Preparing metadata (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25hRequirement already satisfied: requests in /Users/reeteshsudhakar/miniconda3/envs/openaigym/lib/python3.8/site-packages (from yarg->pipreqs) (2.28.1)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /Users/reeteshsudhakar/miniconda3/envs/openaigym/lib/python3.8/site-packages (from requests->yarg->pipreqs) (1.26.14)\n",
      "Requirement already satisfied: idna<4,>=2.5 in /Users/reeteshsudhakar/miniconda3/envs/openaigym/lib/python3.8/site-packages (from requests->yarg->pipreqs) (3.4)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in /Users/reeteshsudhakar/miniconda3/envs/openaigym/lib/python3.8/site-packages (from requests->yarg->pipreqs) (2.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /Users/reeteshsudhakar/miniconda3/envs/openaigym/lib/python3.8/site-packages (from requests->yarg->pipreqs) (2022.12.7)\n",
      "Building wheels for collected packages: docopt\n",
      "  Building wheel for docopt (setup.py) ... \u001b[?25ldone\n",
      "\u001b[?25h  Created wheel for docopt: filename=docopt-0.6.2-py2.py3-none-any.whl size=13706 sha256=16ae2f739531f4b6ac167f641b2020d255f2c07145be37b31a91f3e729e2e68c\n",
      "  Stored in directory: /Users/reeteshsudhakar/Library/Caches/pip/wheels/ca/cc/e3/f1e272f628fdb013d969acc99cfe2e031ea15b3efb74ffe842\n",
      "Successfully built docopt\n",
      "Installing collected packages: docopt, yarg, pipreqs\n",
      "Successfully installed docopt-0.6.2 pipreqs-0.4.11 yarg-0.1.9\n",
      "Note: you may need to restart the kernel to use updated packages.\n",
      "\u001b[31mERROR: Invalid requirement: 'nengo-gui=0.4.9' (from line 4 of requirements.txt)\n",
      "Hint: = is not a valid operator. Did you mean == ?\u001b[0m\u001b[31m\n",
      "\u001b[0mNote: you may need to restart the kernel to use updated packages.\n"
>>>>>>> master
     ]
    }
   ],
   "source": [
    "%pip install -r requirements.txt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "242da4ca",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "import gymnasium as gym\n",
    "import nengo\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "24bb20db",
   "metadata": {},
   "source": [
    "#### Retrieve Env Info\n",
    "~~~\n",
    "env = gym.make(\"CartPole-v1\")\n",
    "\n",
    "observation, info = env.reset(seed=42)\n",
    "\n",
    "for _ in range(1000):\n",
    "     action = env.action_space.sample()\n",
    "     observation, reward, terminated, truncated, info = env.step(action)\n",
    "     print(action, observation, reward, terminated, truncated, info)\n",
    "\n",
    "     if terminated or truncated:\n",
    "         observation, info = env.reset()\n",
    " env.close()\n",
    " ~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a842ea1",
   "metadata": {},
   "source": [
    "#### Action Space Info\n",
    "~~~\n",
    "The action is a `ndarray` with shape `(1,)` which can take values `{0, 1}` indicating the direction\n",
    " of the fixed force the cart is pushed with.\n",
    " \n",
    "| Num | Action                 |\n",
    "|-----|------------------------|\n",
    "| 0   | Push cart to the left  |\n",
    "| 1   | Push cart to the right |\n",
    "\n",
    "**Note**: The velocity that is reduced or increased by the applied force is not fixed and it depends on the angle\n",
    " the pole is pointing. The center of gravity of the pole varies the amount of energy needed to move the cart underneath it\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63138ae3",
   "metadata": {},
   "source": [
    "#### Observation Space Info\n",
    "~~~\n",
    "The observation is a `ndarray` with shape `(4,)` with the values corresponding to the following positions and velocities:\n",
    "\n",
    "| Num | Observation           | Min                 | Max               |\n",
    "|-----|-----------------------|---------------------|-------------------|\n",
    "| 0   | Cart Position         | -4.8                | 4.8               |\n",
    "| 1   | Cart Velocity         | -Inf                | Inf               |\n",
    "| 2   | Pole Angle            | ~ -0.418 rad (-24°) | ~ 0.418 rad (24°) |\n",
    "| 3   | Pole Angular Velocity | -Inf                | Inf               |\n",
    "\n",
    "**Note:** While the ranges above denote the possible values for observation space of each element,\n",
    "    it is not reflective of the allowed values of the state space in an unterminated episode. Particularly:\n",
    "-  The cart x-position (index 0) can be take values between `(-4.8, 4.8)`, but the episode terminates\n",
    "   if the cart leaves the `(-2.4, 2.4)` range.\n",
    "-  The pole angle can be observed between  `(-.418, .418)` radians (or **±24°**), but the episode terminates\n",
    "   if the pole angle is not in the range `(-.2095, .2095)` (or **±12°**)\n",
    "~~~"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4228c67b",
   "metadata": {},
   "source": [
    "### Naive Implementation (Theta Policy)\n",
    "----"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f9de5207",
   "metadata": {},
   "source": [
    "This method simply makes movement based solely on pole angle"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 5,
=======
   "execution_count": 3,
>>>>>>> master
   "id": "8ee5df86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alive for 55 ticks\n"
     ]
    },
    {
     "ename": "AssertionError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
<<<<<<< HEAD
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32mc:\\GitRepos\\OpenAIGym\\CartPole\\Dev\\Neuromorphic\\main.ipynb Cell 10\u001b[0m in \u001b[0;36m<cell line: 19>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/GitRepos/OpenAIGym/CartPole/Dev/Neuromorphic/main.ipynb#X12sZmlsZQ%3D%3D?line=16'>17</a>\u001b[0m env\u001b[39m.\u001b[39mclose()\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/GitRepos/OpenAIGym/CartPole/Dev/Neuromorphic/main.ipynb#X12sZmlsZQ%3D%3D?line=17'>18</a>\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m'\u001b[39m\u001b[39mAlive for \u001b[39m\u001b[39m{\u001b[39;00m\u001b[39mlen\u001b[39m(truths)\u001b[39m}\u001b[39;00m\u001b[39m ticks\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[1;32m---> <a href='vscode-notebook-cell:/c%3A/GitRepos/OpenAIGym/CartPole/Dev/Neuromorphic/main.ipynb#X12sZmlsZQ%3D%3D?line=18'>19</a>\u001b[0m \u001b[39massert\u001b[39;00m \u001b[39many\u001b[39m(truths) \u001b[39m==\u001b[39m \u001b[39mFalse\u001b[39;00m\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/GitRepos/OpenAIGym/CartPole/Dev/Neuromorphic/main.ipynb#X12sZmlsZQ%3D%3D?line=19'>20</a>\u001b[0m \u001b[39massert\u001b[39;00m \u001b[39mlen\u001b[39m(truths) \u001b[39m==\u001b[39m ITERS\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/GitRepos/OpenAIGym/CartPole/Dev/Neuromorphic/main.ipynb#X12sZmlsZQ%3D%3D?line=20'>21</a>\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mSuccessful\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[1;31mAssertionError\u001b[0m: "
=======
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[3], line 19\u001b[0m\n\u001b[1;32m     17\u001b[0m env\u001b[39m.\u001b[39mclose()\n\u001b[1;32m     18\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39mf\u001b[39m\u001b[39m'\u001b[39m\u001b[39mAlive for \u001b[39m\u001b[39m{\u001b[39;00m\u001b[39mlen\u001b[39m(truths)\u001b[39m}\u001b[39;00m\u001b[39m ticks\u001b[39m\u001b[39m'\u001b[39m)\n\u001b[0;32m---> 19\u001b[0m \u001b[39massert\u001b[39;00m \u001b[39many\u001b[39m(truths) \u001b[39m==\u001b[39m \u001b[39mFalse\u001b[39;00m\n\u001b[1;32m     20\u001b[0m \u001b[39massert\u001b[39;00m \u001b[39mlen\u001b[39m(truths) \u001b[39m==\u001b[39m ITERS\n\u001b[1;32m     21\u001b[0m \u001b[39mprint\u001b[39m(\u001b[39m\"\u001b[39m\u001b[39mSuccessful\u001b[39m\u001b[39m\"\u001b[39m)\n",
      "\u001b[0;31mAssertionError\u001b[0m: "
>>>>>>> master
     ]
    }
   ],
   "source": [
    "ITERS = 500\n",
    "env = gym.make(\"CartPole-v1\", render_mode=\"human\")\n",
    "observation, info = env.reset(seed=42)\n",
    "truths = []\n",
    "\n",
    "for _ in range(ITERS):\n",
    "    action = 0 if observation[2] < 0 else 1\n",
    "    observation, reward, terminated, truncated, info = env.step(action)\n",
    "    truths.append(terminated)\n",
    "    env.render()\n",
    "#     print(action, observation, reward, terminated, truncated, info)\n",
    "\n",
    "    if terminated or truncated:\n",
    "        observation, info = env.reset()\n",
    "        break\n",
    "\n",
    "env.close()\n",
    "print(f'Alive for {len(truths)} ticks')\n",
    "assert any(truths) == False\n",
    "assert len(truths) == ITERS\n",
    "print(\"Successful\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ed69f3d",
   "metadata": {},
   "source": [
    "### Naive Implementation (Omega Policy)\n",
    "----"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "484ff551",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alive for 183 ticks\n"
     ]
    },
    {
     "ename": "AssertionError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/5q/ksg3mt4j6nj74_83sysnf1tm0000gn/T/ipykernel_84629/1451793594.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0menv\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'Alive for {len(truths)} ticks'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m \u001b[0;32massert\u001b[0m \u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtruths\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;32massert\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtruths\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mITERS\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Successful\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAssertionError\u001b[0m: "
     ]
    }
   ],
   "source": [
    "ITERS = 500\n",
    "env = gym.make(\"CartPole-v1\", render_mode=\"human\")\n",
    "observation, info = env.reset(seed=42)\n",
    "truths = []\n",
    "\n",
    "for _ in range(ITERS):\n",
    "    action = 0 if observation[3] < 0 else 1\n",
    "    observation, reward, terminated, truncated, info = env.step(action)\n",
    "    truths.append(terminated)\n",
    "    env.render()\n",
    "#     print(action, observation, reward, terminated, truncated, info)\n",
    "\n",
    "    if terminated or truncated:\n",
    "        observation, info = env.reset()\n",
    "        break\n",
    "\n",
    "env.close()\n",
    "print(f'Alive for {len(truths)} ticks')\n",
    "assert any(truths) == False\n",
    "assert len(truths) == ITERS\n",
    "print(\"Successful\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8e3792e",
   "metadata": {},
   "source": [
    "### Naive Implementation (Theta + Omega Policy)\n",
    "----"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 6,
=======
   "execution_count": 4,
>>>>>>> master
   "id": "4d9ddf42",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Alive for 500 ticks\n",
      "Successful\n"
     ]
    }
   ],
   "source": [
    "ITERS = 500\n",
    "TTHRESH = .03\n",
    "env = gym.make(\"CartPole-v1\", render_mode=\"human\")\n",
    "observation, info = env.reset(seed=42)\n",
    "truths = []\n",
    "\n",
    "for _ in range(ITERS):\n",
    "    action = None\n",
    "    if abs(observation[2]) < TTHRESH:\n",
    "        action = 0 if observation[3] < 0 else 1\n",
    "    else:\n",
    "        action = 0 if observation[2] < 0 else 1\n",
    "    observation, reward, terminated, truncated, info = env.step(action)\n",
    "    truths.append(terminated)\n",
    "    env.render()\n",
    "#     print(action, observation, reward, terminated, truncated, info)\n",
    "\n",
    "    if terminated or truncated:\n",
    "        observation, info = env.reset()\n",
    "        break\n",
    "\n",
    "env.close()\n",
    "print(f'Alive for {len(truths)} ticks')\n",
    "assert any(truths) == False\n",
    "assert len(truths) == ITERS\n",
    "print(\"Successful\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3468d4e7",
   "metadata": {},
   "source": [
    "### Mimic Nengo Example\n",
    "-------"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "26db3d24",
   "metadata": {},
   "source": [
    "#### Start OpenAIGym Env"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "30884991",
   "metadata": {},
   "outputs": [],
   "source": [
    "env = gym.make(\"CartPole-v1\")\n",
    "observation, info = env.reset(seed=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1befc262",
   "metadata": {},
   "source": [
    "#### State Storage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "73287944",
   "metadata": {},
   "outputs": [],
   "source": [
    "class ObservationState:\n",
    "    def __init__(self, observation, info):\n",
    "        self.observation = observation\n",
    "        self.terminated = False\n",
    "        self.info = info\n",
    "        self.reward = 0\n",
    "        self.truncated = False\n",
    "        \n",
    "    def setState(self, observation: list, reward: int, terminated: bool, truncated: bool, info: dict):\n",
    "        self.observation = observation\n",
    "        self.terminated = terminated\n",
    "        self.info = info\n",
    "        self.reward = reward\n",
    "        self.truncated = truncated\n",
    "    \n",
    "    def setObservation(self, newobs: list):\n",
    "        self.observation = newobs\n",
    "    \n",
    "    def getObservation(self):\n",
    "        return self.observation\n",
    "    \n",
    "    def setTerminated(self, terminated: bool):\n",
    "        self.terminated = terminated\n",
    "        \n",
    "    def setInfo(self, i: dict):\n",
    "        self.info = info\n",
    "        \n",
    "    def setTruncated(self, truncated: bool):\n",
    "        self.truncated = truncated"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "271bcd19",
   "metadata": {},
   "source": [
    "#### Model Creation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5f327c4e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "done\n"
     ]
    }
   ],
   "source": [
    "# Handle movement, generate movement\n",
    "def move(t, x):\n",
    "    action = max(enumerate(x), key=(lambda y: y[1]))[0]\n",
    "    observation, reward, terminated, truncated, info = env.step(action)\n",
    "    storeState.setState(observation, reward, terminated, truncated, info)\n",
    "    \n",
    "storeState = ObservationState(observation, info)\n",
    "with nengo.Network() as model:\n",
    "    \n",
    "    # Movement\n",
    "    movement_node = nengo.Node(move, size_in=2)\n",
    "    movement_ensemble = nengo.Ensemble(n_neurons=100, dimensions=2, radius=1.4)\n",
    "    nengo.Connection(movement_ensemble, movement_node)\n",
    "    \n",
    "    # Action Selection\n",
    "    bg = nengo.networks.actionselection.BasalGanglia(2)\n",
    "    thal = nengo.networks.actionselection.Thalamus(2)\n",
    "    nengo.Connection(bg.output, thal.input)\n",
    "    \n",
    "    # Convert the selection actions to movement transforms\n",
    "    nengo.Connection(thal.output[0], movement_ensemble, transform=[[1], [0]])\n",
    "    nengo.Connection(thal.output[1], movement_ensemble, transform=[[0], [1]])\n",
    "    \n",
    "    # Observation Node\n",
    "    def getObservation(t):\n",
    "        return observation\n",
    "    observation_node = nengo.Node(getObservation)\n",
    "    \n",
    "print(\"done\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e4662e8",
   "metadata": {},
   "source": [
    "### Mimic James' Example\n",
    "----"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 3,
=======
   "execution_count": 8,
>>>>>>> master
   "id": "132568f3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vdom.v1+json": {
       "attributes": {},
       "tagName": "div"
      },
      "text/html": [
       "\n",
       "                <script>\n",
       "                    if (Jupyter.version.split(\".\")[0] < 5) {\n",
<<<<<<< HEAD
       "                        var pb = document.getElementById(\"995e606f-01d3-42db-8bf6-14f65063403f\");\n",
=======
       "                        var pb = document.getElementById(\"97196244-e153-4fc1-87de-db0f90b2ff49\");\n",
>>>>>>> master
       "                        var text = document.createTextNode(\n",
       "                            \"HMTL progress bar requires Jupyter Notebook >= \" +\n",
       "                            \"5.0 or Jupyter Lab. Alternatively, you can use \" +\n",
       "                            \"TerminalProgressBar().\");\n",
       "                        pb.parentNode.insertBefore(text, pb);\n",
       "                    }\n",
       "                </script>\n",
<<<<<<< HEAD
       "                <div id=\"995e606f-01d3-42db-8bf6-14f65063403f\" style=\"\n",
=======
       "                <div id=\"97196244-e153-4fc1-87de-db0f90b2ff49\" style=\"\n",
>>>>>>> master
       "                    width: 100%;\n",
       "                    border: 1px solid #cfcfcf;\n",
       "                    border-radius: 4px;\n",
       "                    text-align: center;\n",
       "                    position: relative;\">\n",
       "                  <div class=\"pb-text\" style=\"\n",
       "                      position: absolute;\n",
       "                      width: 100%;\">\n",
       "                    0%\n",
       "                  </div>\n",
       "                  <div class=\"pb-fill\" style=\"\n",
       "                      background-color: #bdd2e6;\n",
       "                      width: 0%;\">\n",
       "                    <style type=\"text/css\" scoped=\"scoped\">\n",
       "                        @keyframes pb-fill-anim {\n",
       "                            0% { background-position: 0 0; }\n",
       "                            100% { background-position: 100px 0; }\n",
       "                        }\n",
       "                    </style>\n",
       "                    &nbsp;\n",
       "                  </div>\n",
       "                </div>"
      ],
      "text/plain": [
       "HtmlProgressBar cannot be displayed. Please use the TerminalProgressBar. It can be enabled with `nengo.rc['progress']['progress_bar'] = 'nengo.utils.progress.TerminalProgressBar'`."
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vdom.v1+json": {
       "attributes": {
<<<<<<< HEAD
        "id": "3c2c8739-8803-4fe6-bfa9-58903a4567b2",
=======
        "id": "a67ac582-dbae-4236-a108-11b1ff58e580",
>>>>>>> master
        "style": {
         "border": "1px solid #cfcfcf",
         "borderRadius": "4px",
         "boxSizing": "border-box",
         "position": "relative",
         "textAlign": "center",
         "width": "100%"
        }
       },
       "children": [
        {
         "attributes": {
          "class": "pb-text",
          "style": {
           "position": "absolute",
           "width": "100%"
          }
         },
         "children": [
          "Build finished in 0:00:01."
         ],
         "tagName": "div"
        },
        {
         "attributes": {
          "class": "pb-fill",
          "style": {
           "animation": "none",
           "backgroundColor": "#bdd2e6",
           "backgroundImage": "none",
           "backgroundSize": "100px 100%",
           "width": "100%"
          }
         },
         "children": [
          {
           "attributes": {
            "scoped": "scoped",
            "type": "text/css"
           },
           "children": [
            "\n                        @keyframes pb-fill-anim {\n                            0% { background-position: 0 0; }\n                            100% { background-position: 100px 0; }\n                        }}"
           ],
           "tagName": "style"
          },
          " "
         ],
         "tagName": "div"
        }
       ],
       "tagName": "div"
      },
      "text/html": [
       "<script>\n",
       "              (function () {\n",
<<<<<<< HEAD
       "                  var root = document.getElementById('995e606f-01d3-42db-8bf6-14f65063403f');\n",
=======
       "                  var root = document.getElementById('97196244-e153-4fc1-87de-db0f90b2ff49');\n",
>>>>>>> master
       "                  var text = root.getElementsByClassName('pb-text')[0];\n",
       "                  var fill = root.getElementsByClassName('pb-fill')[0];\n",
       "\n",
       "                  text.innerHTML = 'Build finished in 0:00:01.';\n",
       "                  \n",
       "            fill.style.width = '100%';\n",
       "            fill.style.animation = 'pb-fill-anim 2s linear infinite';\n",
       "            fill.style.backgroundSize = '100px 100%';\n",
       "            fill.style.backgroundImage = 'repeating-linear-gradient(' +\n",
       "                '90deg, #bdd2e6, #edf2f8 40%, #bdd2e6 80%, #bdd2e6)';\n",
       "        \n",
       "                  \n",
       "                fill.style.animation = 'none';\n",
       "                fill.style.backgroundImage = 'none';\n",
       "            \n",
       "              })();\n",
       "        </script>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "class InputManager:\n",
    "    def __init__(self):\n",
    "        self.state = [0 for _ in range(4)]\n",
    "        \n",
    "    def get_input_data(self, data):\n",
    "        self.state = data\n",
    "    \n",
    "    def return_output(self):\n",
    "        return self.state\n",
    "\n",
    "input_manager = InputManager()\n",
    "optimal_manager = InputManager()\n",
    "    \n",
    "with nengo.Network() as model:\n",
    "    input_node = nengo.Node(input_manager.return_output())\n",
    "    optimal_node = nengo.Node(optimal_manager.return_output())\n",
    "    intermediary = nengo.Ensemble(n_neurons=10, dimensions=4)\n",
    "    ensemble = nengo.Ensemble(n_neurons=10, dimensions=4)\n",
    "    error = nengo.Ensemble(n_neurons=10, dimensions=4)\n",
    "    \n",
    "    nengo.Connection(input_node, intermediary)\n",
    "    connection = nengo.Connection(intermediary, ensemble)\n",
    "    connection.learning_rule_type = nengo.PES(learning_rate=3e-4)\n",
    "    nengo.Connection(error, connection.learning_rule)\n",
    "\n",
    "    nengo.Connection(ensemble, error)\n",
    "    nengo.Connection(optimal_node, error, transform=-1)\n",
    "    \n",
    "    probe = nengo.Probe(ensemble, synapse=0.01)\n",
    "    \n",
    "simulator = nengo.Simulator(model)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
<<<<<<< HEAD
   "display_name": "Python 3",
=======
   "display_name": "openaigym",
>>>>>>> master
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
<<<<<<< HEAD
   "version": "3.9.1"
  },
  "vscode": {
   "interpreter": {
    "hash": "a011750b2b533169a74624973292470b0ffed763771bbe9f1a5f114ca46e45d6"
=======
   "version": "3.8.16"
  },
  "vscode": {
   "interpreter": {
    "hash": "a04c93aca9e73cd1832559b26d1e35e7aae3746e17ce69ca883c5481ccabd088"
>>>>>>> master
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
